/* -----------------------------------  xorm 操作数据库  ---------------------------------------------- */

插入数据
orm.InsertOne(report)

根据id 查询指定数据 
orm.SQL("select * from reports where id=?", id).Get(&report)

查询数据
total 是值
rows := db.QueryRow(sql)
rows.Scan(&total)

使用sql查询数据 并返回map[string]string
orm.QueryString("select user_name from t_user where user_id=?", userId)

更新指定的列
orm.Where("id=?", reports.Id).And("deleted=0").Cols("title", "brief", "report_content", "start_time", "end_time").Update(&reports)

根据id 更新数据
1.方法一  
  orm.Update(report{
		TaskType:    task.TaskType,
		NodeType:    task.NodeType,
		UpgradeType: task.UpgradeType,
		Env:         task.Env,
		Apps:        task.Apps,
		Role:        task.Role,
		UpdateTime:  time.Now(),
	}, report{
		Id: task.Id,
	})


 2.方法二
 orm.Where("id=?",id).Update(report)


删除数据
orm.Delete(&report{TaskId: taskId})


根据sql 删除数据
orm.Exec("delete from sap_ansiable_tasks where id = ?", taskId)








1.     micro   rpc 创建客户端与服务端  


 /*                                                    protobuf  file                                              */

syntax = "proto3";

service Greeter {
    rpc Hello(HelloRequest) returns (HelloResponse) {}
}

message HelloRequest {
    string name = 1;
}

message HelloResponse {
    string greeting = 2;
}




/ *                                        service.go                         */   



package main

import (
	"fmt"
	"microedit/message"
	"net/http"
	"net/rpc"
	"net"
)

type Request message.HelloResponse

func (this *Request)Hello(request message.HelloRequest,response *message.HelloResponse)error{
	fmt.Println("service message",request.Name)
	response.Greeting = request.Name + "8080"
	return nil
}

func main(){

	rpc.Register(new(Request))
	rpc.HandleHTTP()

	ln,_:=net.Listen("tcp","127.0.0.1:8080")
	http.Serve(ln,nil)

}




/*                                client.go                             */


package main

import (
	"fmt"
	"microedit/message"
	"net/rpc"
)

func main() {
	var pp message.HelloResponse
	cli , _:=rpc.DialHTTP("tcp","127.0.0.1:8080")
	cli.Call("Request.Hello",message.HelloRequest{Name: "greeter point:"},&pp)

	fmt.Println("最后得到",&pp)
}



---------------------   gjson 的使用  -----------------------------
github.com/tidwall/gjson


const json = `{"name":{"first":"Janet","last":"Prichard"},"age":47}`

func main(){
	LastValue := gjson.Get(json,"name.last")
	fmt.Println(LastValue.string())
}

路径可能包含通配符'*'和'?'.
通过下标访问数组值.
通过'#'来获取值在元素中的排位或访问子路径.
.和通配符可以通过'\'来转义.

{
  "name": {"first": "Tom", "last": "Anderson"},
  "age":37,
  "children": ["Sara","Alex","Jack"],
  "fav.movie": "Deer Hunter",
  "friends": [
    {"first": "Dale", "last": "Murphy", "age": 44},
    {"first": "Roger", "last": "Craig", "age": 68},
    {"first": "Jane", "last": "Murphy", "age": 47}
  ]
}


"name.last"          >> "Anderson"
"age"                >> 37
"children"           >> ["Sara","Alex","Jack"]
"children.#"         >> 3
"children.1"         >> "Alex"
"child*.2"           >> "Jack"
"c?ildren.0"         >> "Sara"
"fav\.movie"         >> "Deer Hunter"
"friends.#.first"    >> ["Dale","Roger","Jane"]
"friends.1.last"     >> "Craig"


你同样能通过#[...]来查询数组中的第一个匹配的项, 或通过'#[...]#'查询所有匹配的项.
查询支持==, !=, <, <=, >, >=比较运算符和'%'模糊匹配.

friends.#[last=="Murphy"].first    >> "Dale"
friends.#[last=="Murphy"]#.first   >> ["Dale","Jane"]
friends.#[age>45]#.last            >> ["Craig","Murphy"]
friends.#[first%"D*"].last         >> "Murphy"


ForEachLines 方法可以迭代json.

gjson.ForEachLine(json, func(line gjson.Result) bool{
    println(line.String())
    return true
})


判断json是否合法

if !gjson.Valid(json) {
    return errors.New("invalid json")
}

将值反序列化到map

res ,ok :=gjson.parse(json).value().(map[string]interface{})
if !ok{
	fmt.Println("反序列化失败")
}





/* -------------------- reflect --------------------- */

// 通过放射使用结构体字段

type ReflectFactory struct {
	Name string
	Age int
}

func (s *ReflectFactory) A() {
	fmt.Println("A")
}

func (s *ReflectFactory) B() {
	fmt.Println("B")
}

func main() {
	r := ReflectFactory{Name:"Ellison"}

	field := "Name"

	res := reflect.ValueOf(&r).Elem().FieldByName(field).String()
	fmt.Println(res)
}



// 通过反射调用结构体对应的方法

type ReflectFactory struct {
	Name string
	Age int
}

func (s *ReflectFactory) A(action string) string {
	return action
}

func (s *ReflectFactory) B(action string) string {
	return action
}

func main() {
	r := ReflectFactory{Name:"Ellison"}

	// 方法名称
	field := "B"
	valueS := reflect.ValueOf(&r)
	method := valueS.MethodByName(field)
	params := []reflect.Value{
		reflect.ValueOf("song"), // 方法参数
	}
	res := method.Call(params)[0].String() // 返回的是字符串
	fmt.Println(res)
}




/* ----------------------------------- gin框架 ----------------------------------*/

// gin 生成路由
	router := gin.Default() 

// gin 运行 
	router.run()

//将request的body中数据,自动按照json格式解析到结构体
 r.POST("loginJSON", func(c *gin.Context) {
	var json Student
     	c.ShouldBindJSON(&json)
}

// 表单数据绑定
 r.POST("loginJSON", func(c *gin.Context) {
	var form Student
	c.Bind(&form)
}

// 获取url参数   /welcome?firstname=&lastname=
router.GET("/welcome", func(c *gin.Context) { 
        firstname := c.DefaultQuery("firstname", "Guest") 
        lastname := c.Query("lastname") 
        c.String(http.StatusOK, "Hello %s %s", firstname, lastname) 
})

// 获取url
router.GET("/user/:name", func(c *gin.Context) { 
        name := c.Param("name") 
        c.String(http.StatusOK, "Hello %s", name) 
})


// 中间件
1.先定义中间件

func MiddleWare() gin.HandlerFunc { 
    return func(c *gin.Context) { 
        fmt.Println("before middleware") 
        c.Set("request", "clinet_request") 
        c.Next() 
        fmt.Println("before middleware") 
    } 
}


2.中间件使用

router.Use(MiddleWare()) { 
    router.GET("/middleware", func(c *gin.Context) { 
        request := c.MustGet("request").(string) 
        req, _ := c.Get("request") 
        c.JSON(http.StatusOK, gin.H{ 
            "middile_request": request, "request": req, 
        }) 
    }) 
}

3. 单个中间件


router.GET("/before", MiddleWare(), func(c *gin.Context) { 
    request := c.MustGet("request").(string) 
    c.JSON(http.StatusOK, gin.H{ 
        "middile_request": request, 
    }) 
})

4.群组中间件


authorized := router.Group("/", MyMiddelware()) 
// 或者这样用： 
authorized := router.Group("/") 
authorized.Use(MyMiddelware()) { 
    authorized.POST("/login", loginEndpoint) 
}

	
 //  使用net/http 生成固定端口
    router := gin.Default()
    http.ListenAndServe(":8080", router)




-----------------------   goroutine   50个协程来实现数字减1 ------------------

var y = 100000
var l sync.Mutex
var wg sync.WaitGroup

// 互斥锁版加函数
func reduce(x int) {
	defer wg.Done()
	for {
		l.Lock()
		if y>0{
			y--
		}
		l.Unlock()
		fmt.Println("第",x,"协程执行的值: ",y)
		if y<=0{
			break
		}
	}
}

func main() {
	StartTime := time.Now()
	wg.Add(50)
	for i:=0;i<50;i++{
		go reduce(i)
	}
	wg.Wait()
	EndTime := time.Now()
	fmt.Println("----------------协程消费时间: ",EndTime.Sub(StartTime),"  ---------------------")
	fmt.Println("y是否等于0\t",y==0)
	fmt.Println("-------------ending-------------")
}


/*   -----------------------------------------------    go 正则表达式       --------------------------------------------------*/

	str := strings.Replace(res[0]["Create Table"], "\n", "", -1)      // 将\n 替换
	match := fmt.Sprintf(`.%s(.*?),`, v1["COLUMN_NAME"])
	reg, _ := regexp.Compile(match)
	sub := reg.FindSubmatch([]byte(str))



/*  ------------------------------------------------      go 上传单个文件    -------------------------------------------- */

func uploadOne(w http.ResponseWriter, r *http.Request) {
    //判断请求方式
    if r.Method == "POST" {
        //设置内存大小
        r.ParseMultipartForm(32 << 20);
        //获取上传的第一个文件
        file, header, err := r.FormFile("file");
        defer file.Close();
        if err != nil {
            log.Fatal(err);
        }
        //创建上传目录
        os.Mkdir("./upload", os.ModePerm);
        //创建上传文件
        cur, err := os.Create("./upload/" + header.Filename);
        defer cur.Close();
        if err != nil {
            log.Fatal(err);
        }
        //把上传文件数据拷贝到我们新建的文件
        io.Copy(cur, file);
    } else {
        //解析模板文件
        t, _ := template.ParseFiles("./uploadOne.html");
        //输出文件数据
        t.Execute(w, nil);
    }
}



/*  --------------------------------------------   批量上传文件  -----------------------------------------------*/

//  注意一点 ， 不能使用 ioutil.ReadAll(file)  这样会把文件读取掉 ， 后面保存的只是空文件。 


func uploadMore(w http.ResponseWriter, r *http.Request) {
    if r.Method == "POST" {
        //设置内存大小
        r.ParseMultipartForm(32 << 20);
        //获取上传的文件组
        files := r.MultipartForm.File["file"];
        len := len(files);
        for i := 0; i < len; i++ {
            //打开上传文件
            file, err := files[i].Open();
            defer file.Close();
            if err != nil {
                log.Fatal(err);
            }
            //创建上传目录
            os.Mkdir("./upload", os.ModePerm);
            //创建上传文件
            cur, err := os.Create("./upload/" + files[i].Filename);
            defer cur.Close();
            if err != nil {
                log.Fatal(err);
            }
            io.Copy(cur, file);
        }
    } else {
        //解析模板文件
        t, _ := template.ParseFiles("./uploadMore.html");
        //输出文件数据
        t.Execute(w, nil);
    }
}



