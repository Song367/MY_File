
        people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
        people = sorted(people, key = lambda x: (-x[0], x[1]))
        // 解释   以x[0]为主要，x[1]为次要的进行排序，-x[0]则代表降序
        
        /*  people ---       [[7, 0], [7, 1], [6, 1], [5, 0], [5, 2], [4, 4]]    */
        
        
        /* github 上传步骤  */
        git init
        git add README.md
        git commit -m "first commit"
        git branch -M main
        git remote add origin https://github.com/Song367/Spam.git
        git push -u origin main
        
        


        /*   python pandas --------------------*/
        pd.DataFrame(data,index= , columns= )
        t是一个dataframe
        
        
        pd.head() # 默认获取前5行
        pd.tail() # 默认获取后5行
        pd.info() # 显示dataframe的详情 在这里面可以看到有多少行，多少列，有没有空值
        t.unique()   # 生成的数据唯一
        
        # 通过标签去获取数据
        t.loc()  
        t.loc(["a",:])     # 获取第a行的所有列
        t.iloc([["a","b"],"v"])    # 获取第a,b行的v列

        # 通过索引去获取数据
        t.iloc()
        t.iloc([:,0])     # 获取所有行的第一列
        t.iloc([[0,1],:])  # 获取第一行和第二行的所有列
        
        t.isnull()
        t.notnull()
        t.dropna(axis=0,how="all",inplace=False)     # axis=0 行 ， how="all" 当整行或者整列都是nan时，就删除      
        # how = "any" 只要有一个nan就删除 ，inplace = False 生成新的数据 ， inplace = True 修改原数据 
        
        # 填nan
        
        t.fillna(t.mean())     # 用平均值去填充        
        t.["age"] = t["age"].fillna(t["age"].mean())      # 只填充某一列并保存到原来数据
        
        # 合并数据
        
        t.join(t2)     # 默认以行来合并  合并时以t为准
        
        t.merge(t2,on="a",how="outer")      # on= 指定以哪一列进行合并， 
        # how = 指定合并方式  默认inner连接 ， outer 外连接 ， left 左连接表示以t为准 ， right有链接 表示以t2为准 
        
        当两个列名不相同时 ， 就可以用left_on , right_on   例如t.merge(t2,left_on="a",right_on="b")     表示以t的a列 和 t2的b列 来内连接    

        
