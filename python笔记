
/* ------------------------------   多线程   -----------------------------------------*/
import threading

class Th(threading.Thread):
    def __init__(self,Id):
        super().__init__()
        self.ID = Id
    
    def run():
        print_time(self.ID)
        
def print_time(id):
    print(id)


t = Th(1)

t.start()

/* -------------------------------- 多进程  --------------------------------------------*/

import multiprocessing

def a(x):
    print(x)

p1 = multiprocessing.Process(target=a,args=(1,))
p1.start()
p1.join()


/*---------------------------------- 装饰器  ------------------------------------------ */

Python中的装饰器是通过利用了函数特性的闭包实现的，所以在说装饰器之前，我们需要先了解函数特性，以及闭包是怎么利用了函数特性的。

函数特性：
1.函数作为变量传递
2.函数作为参数传递
3.函数作为返回值
4.函数嵌套及跨域访问


闭包实现 ： 

Python中的装饰器是通过闭包实现的，简单地讲，闭包就是引用了外部变量的内部函数，而闭包的实现正是利用了以上函数特性




def outer(x):
    def inner():                  # 函数嵌套
        return x                  # 跨域访问，引用了外部变量x
 
    return inner                  # 函数作为返回值
 
closure = outer('外部变量')        # 函数作为变量赋给closure
print(closure())                  # 执行闭包



装饰器实现：

def outer(x):
    def inner():
        return '戴了inner牌帽子的 ' + x()
 
    return inner
 
@outer
def func():
    return '函数func'
 
print(func())


装饰器用法替代了 outer(func())


/*-------------------------------------------------------------------------------------*/
        people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
        people = sorted(people, key = lambda x: (-x[0], x[1]))
        // 解释   以x[0]为主要，x[1]为次要的进行排序，-x[0]则代表降序
        
        /*  people ---       [[7, 0], [7, 1], [6, 1], [5, 0], [5, 2], [4, 4]]    */
        
        
        /* github 上传步骤  */
        git init
        git add README.md
        git commit -m "first commit"
        git branch -M main
        git remote add origin https://github.com/Song367/Spam.git
        git push -u origin main
        
        


        /*   python pandas --------------------*/
        pd.DataFrame(data,index= , columns= )
        t是一个dataframe
        
        
        pd.head() # 默认获取前5行
        pd.tail() # 默认获取后5行
        pd.info() # 显示dataframe的详情 在这里面可以看到有多少行，多少列，有没有空值
        t.unique()   # 生成的数据唯一
        
        # 通过标签去获取数据
        t.loc()  
        t.loc(["a",:])     # 获取第a行的所有列
        t.iloc([["a","b"],"v"])    # 获取第a,b行的v列

        # 通过索引去获取数据
        t.iloc()
        t.iloc([:,0])     # 获取所有行的第一列
        t.iloc([[0,1],:])  # 获取第一行和第二行的所有列
        
        t.isnull()
        t.notnull()
        t.dropna(axis=0,how="all",inplace=False)     # axis=0 行 ， how="all" 当整行或者整列都是nan时，就删除      
        # how = "any" 只要有一个nan就删除 ，inplace = False 生成新的数据 ， inplace = True 修改原数据 
        
        # 填nan
        
        t.fillna(t.mean())     # 用平均值去填充        
        t.["age"] = t["age"].fillna(t["age"].mean())      # 只填充某一列并保存到原来数据
        
        # 合并数据
        
        t.join(t2)     # 默认以行来合并  合并时以t为准
        
        t.merge(t2,on="a",how="outer")      # on= 指定以哪一列进行合并， 
        # how = 指定合并方式  默认inner连接 ， outer 外连接 ， left 左连接表示以t为准 ， right有链接 表示以t2为准 
        
        当两个列名不相同时 ， 就可以用left_on , right_on   例如t.merge(t2,left_on="a",right_on="b")     表示以t的a列 和 t2的b列 来内连接    
        
        
        
        分组
        groupobj = t.groupby(by="a")      # 以a列分组     返回是dataframe，可以通过for k,v in groupobj: 实现打印
        
        t["brand"].groupby(by=[t["a"],t["b"]])       # 将某一列 再按照a ， b两列来分组 
        
        groupobj.count()  # 统计每一行的个数
        groupobj["b"].count()       # 指定某一列的个数
        
        
        索引
        
        t.index = ["a","b"]         # 将原来的索引修改成 a, b
        
        t.set_index("a",drop=Ture)      # 将某一列作为索引   drop=True 删除作为索引的这一列
        
        t.set_index("a",drop=False).index.unique()       # 将索引设置为唯一
        
        t.swaplevel()  # 将设置的多个索引层次话       
        t.sortlevel()   # 将设置的多个索引排序
        

        
