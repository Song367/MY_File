
-------------------------------------  计算阶乘  -------------------------------------
f(x) = 1! + 3! + 5! + ... + (2n-1)!

def f(x):
    if x == 1:
        return 1
    if x == 0:
        return 0
    r = 1
    n = 2*x - 1
    for i in range(1,n+1):
        r *= i
    return r + f(x-1)





------------------------------------- 双指针 -----------------------------------------

给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。

函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。


def twoSum(self, numbers: List[int], target: int) -> List[int]:
        n = len(numbers)
        i = 0
        j = n - 1
        while i < j:
            if numbers[i] + numbers[j] == target:
                return [i+1, j+1]
            elif numbers[i] + numbers[j] > target:
                j -= 1
            else:
                i += 1
                
                

汉罗塔问题  三个柱子，n个盘子     A 中放了所有盘子 ， b, c 都为空
def hanota(self, A: List[int], B: List[int], C: List[int]) -> None:

        def hanoi(n,x,y,z):
            if n == 1:
                z.append(x.pop())
                return
            else:
                hanoi(n-1,x,z,y)
                hanoi(1,x,y,z)
                hanoi(n-1,y,x,z)
                
        hanoi(len(A),A,B,C)
        
        
        
        
  /*-------------------- python 树的三种遍历 ----------------------*/
          class Solution:
            def inorderTraversal(self, root: TreeNode) -> List[int]:
                res = []
                stack = []
                cur = root
                # 中序，模板：先用指针找到每颗子树的最左下角，然后进行进出栈操作
                while stack or cur:
                    while cur:
                        stack.append(cur)
                        cur = cur.left
                    cur = stack.pop()
                    res.append(cur.val)
                    cur = cur.right
                return res

                # # 前序，相同模板
                # while stack or cur:
                #     while cur:
                #         res.append(cur.val)
                #         stack.append(cur)
                #         cur = cur.left
                #     cur = stack.pop()
                #     cur = cur.right
                # return res

                # # 后序，相同模板
                # while stack or cur:
                #     while cur:
                #         res.append(cur.val)
                #         stack.append(cur)
                #         cur = cur.right
                #     cur = stack.pop()
                #     cur = cur.left
                # return res[::-1]
        
        
        
        
                简化目录
                def simplifyPath(path: str) -> str:
                    r = []
                    for s in path.split('/'):
                        r = {'': r, '.': r, '..': r[:-1]}.get(s, r + [s])
                    return '/' + '/'.join(r)
                    
                   
       ------------------  动态规划  -  找相邻最近的字符串和 --------------------
        def maxSubArray( nums) -> int:
            for i in range(1, len(nums)):
                nums[i] = max(nums[i - 1] + nums[i], nums[i])
            return max(nums)
                
        
        
        
        ----------------------------------   回溯算法   -    找集合的子集[1,2,3]   --------------------------------
        
        def subsets(self, nums: List[int]) -> List[List[int]]:
                res = []
                n = len(nums)
                def helper(i, tmp):
                    res.append(tmp)
                    for j in range(i, n):
                        helper(j + 1,tmp + [nums[j]] )
                helper(0, [])
                return res
        
        结果：
        [[]]
        [[], [1]]
        [[], [1], [1, 2]]
        [[], [1], [1, 2], [1, 2, 3]]
        [[], [1], [1, 2], [1, 2, 3], [1, 3]]
        [[], [1], [1, 2], [1, 2, 3], [1, 3], [2]]
        [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3]]
        [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]



           
