默认端口：27017

因为MongoDB低层引擎使用JS实现的，所以部分js语法可以实现

mongodb数据类型：
Object ID：
String： 字符串，必须是utf-8
Boolean：布尔值
Integer：整数
Double：浮点数
Arrays：数组或者列表
Object：字典
Null：空数据类型
Timestamp：时间戳
Date


查看数据库                   选择数据库                                                                                                                    删除数据库
show databases (缩写dbs)          use admin          当选择不存在的数据库时，会自动创建这个数据库                  db.dropDatabse()  要先选中数据库

查看集合（表）            创建集合                                                删除集合
show collections          db.createCollection('admin2')              db.admin2.drop()


集合的增，删，改，查

增：db.s_set.insert({name:'song',age:18})       # 和数据库类似，如果不存在则自动创建集合。每一行数据会自动生成一个_id键,也可自己定义
# _id键组成部分：时间戳 ， 机器 ，pid ，计数器

插入多个数据：
db.s_set.insert([{name:'1',age:2},{name:'2',age:3}])

使用for循环插入数据：
for(var i=0;i<10;i++){
	db.s_set.insert({name:'a'+i,age:i});
}


查询：
db.s_set.find().pretty() # pretty()进行格式化

db.s_set.find({条件}，{所需获取列名})

db.s_set.find({age:6},{name:1})   # 获取年龄为6的name列

db.s_set.find({age:6},{name:0})   # 获取年龄为6的除了name意外的所有列 

# 运算符
$gt    大于
$gte  大于等于
$lt     小于
$lte   小于等于
$ne   不等于
$in    in(范围内)
$nin  not in

db.s_set.find({age:{$gt:3}},{name:1})     # 获取年龄大于3的name列

db.s_set.find({age:{$in:[2,3,6]}},{name:1})   # 获取年龄等于2,3,6的name列


聚合查询：
	管道：
	$group    # 分组
	$match    # 过滤数据
	$sort        # 排序
	$skip        # 跳过指定文档数
	$limit        # 限制集合数
	
	常用表达式：
	$sum    # 总和
	$avg
	$max
	$min   

db.s_set.aggregate([
	{
		$group:{                            
			_id:"$sex",                        #  按照性别去分类计算     # _id:null   就是不分类           只有group有这一项
			rs:{$sum:"$age"}              #  返回结果是age的和   $sum:1   就表示查看个数，等同于count
	}
}
])

db.s_set.aggregate([
	{
		$group:{
			_id:"$sex",                        
			rs:{$sum:"$age"}              
	}，
	{
		$sort:{                       
			rs:1                                   # 按照rs返回的结果进行升序                    
	}，
}
])





修改：

编辑器

$set   修改数据
$inc   递增
$rename   修改字段
$unset      删除
例子：
db.s_set.update(条件，新数据)

db.s_set.update({name:'song'},{name:'ss'})       # 这是整行替换不是修改,将song替换成ss 

db.s_set.update({name:'song'},{$set:{name:'ss'}})     # 将name等于song 替换为 ss

db.s_set.update({name:'song'},{$inc:{age:2}})           # 将name为song   的  年龄递增2

db.s_set.update({name:'song'},{
	$inc:{age:2},                               # 将年龄加2
	$set:{name:'ss'},                         # 将song改为ss
	$rename:{name:'username'},     # 将name键改为username
	$unset:{sex:true}  		  # 将unset这一列删除
})


删除文档 （行）
db.s_set.remove(条件，[true,false])      # true是删除一条   false删除多条


排序

db.s_set.find().sort({age:1})       # 1代表升序 -1代表降序

分页

db.s_set.find().sort({age:-1}).skip(0).limit(2)      # 降序，跳过0行数据，限制显示2行

动态实现分页skip公式： (当前页-1) * 分页个数









